From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/eq.c

Change-Id: Idaea95a981af492482db2eb48201d224880f59c5
Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
---
 drivers/net/ethernet/mellanox/mlx5/core/eq.c | 31 +++++++++++++++++++++++++++-
 1 file changed, 30 insertions(+), 1 deletion(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@ -240,7 +240,11 @@ static void eq_pf_process(struct mlx5_eq
 			break;
 		}
 
+#ifdef dma_rmb
 		dma_rmb();
+#else
+		rmb();
+#endif
 		pf_eqe = &eqe->data.page_fault;
 		pfault->event_subtype = eqe->sub_type;
 		pfault->bytes_committed = be32_to_cpu(pf_eqe->bytes_committed);
@@ -348,6 +352,7 @@ static void eq_pf_process(struct mlx5_eq
 
 	eq_update_ci(eq, 1);
 }
+#endif /* CONFIG_INFINIBAND_ON_DEMAND_PAGING */
 
 static void dump_eqe(struct mlx5_core_dev *dev, void *eqe)
 {
@@ -364,6 +369,7 @@ static void dump_eqe(struct mlx5_core_de
 	}
 }
 
+#ifdef CONFIG_INFINIBAND_ON_DEMAND_PAGING
 static irqreturn_t mlx5_eq_pf_int(int irq, void *eq_ptr)
 {
 	struct mlx5_eq *eq = eq_ptr;
@@ -477,7 +483,7 @@ int mlx5_core_page_fault_resume(struct m
 	return ret;
 }
 EXPORT_SYMBOL_GPL(mlx5_core_page_fault_resume);
-#endif
+#endif /* CONFIG_INFINIBAND_ON_DEMAND_PAGING */
 
 static void general_event_handler(struct mlx5_core_dev *dev,
 				  struct mlx5_eqe *eqe)
@@ -574,7 +580,11 @@ static irqreturn_t mlx5_eq_int(int irq,
 		 * Make sure we read EQ entry contents after we've
 		 * checked the ownership bit.
 		 */
+#ifdef dma_rmb
 		dma_rmb();
+#else
+		rmb();
+#endif
 
 		mlx5_core_dbg(eq->dev, "eqn %d, eqe type %s\n",
 			      eq->eqn, eqe_type_str(eqe->type));
@@ -686,9 +696,11 @@ static irqreturn_t mlx5_eq_int(int irq,
 			mlx5_port_module_event(dev, eqe);
 			break;
 
+#if defined (HAVE_PTP_CLOCK_INFO_N_PINS) && defined (HAVE_PTP_CLOCK_INFO) && (defined (CONFIG_PTP_1588_CLOCK) || defined(CONFIG_PTP_1588_CLOCK_MODULE))
 		case MLX5_EVENT_TYPE_PPS_EVENT:
 			mlx5_pps_event(dev, eqe);
 			break;
+#endif
 
 		case MLX5_EVENT_TYPE_FPGA_ERROR:
 		case MLX5_EVENT_TYPE_FPGA_QP_ERROR:
@@ -836,7 +848,11 @@ int mlx5_create_map_eq(struct mlx5_core_
 	mlx5_add_pci_to_irq_name(dev, name, priv->irq_info[vecidx].name);
 
 	eq->eqn = MLX5_GET(create_eq_out, out, eq_number);
+#ifdef HAVE_PCI_IRQ_API
 	eq->irqn = pci_irq_vector(dev->pdev, vecidx);
+#else
+	eq->irqn = priv->msix_arr[vecidx].vector;
+#endif
 	eq->dev = dev;
 	eq->doorbell = priv->uar->map + MLX5_EQ_DOORBEL_OFFSET;
 	err = request_irq(eq->irqn, handler, 0,
@@ -871,7 +887,11 @@ int mlx5_create_map_eq(struct mlx5_core_
 	return 0;
 
 err_irq:
+#ifdef HAVE_PCI_IRQ_API
 	free_irq(eq->irqn, eq);
+#else
+	free_irq(priv->msix_arr[vecidx].vector, eq);
+#endif
 
 err_eq:
 	mlx5_cmd_destroy_eq(dev, eq->eqn);
@@ -944,6 +964,13 @@ int mlx5_eq_del_cq(struct mlx5_eq *eq, s
 	return 0;
 }
 
+#ifndef HAVE_PCI_IRQ_API
+u32 mlx5_get_msix_vec(struct mlx5_core_dev *dev, int vecidx)
+{
+	return dev->priv.msix_arr[MLX5_EQ_VEC_ASYNC].vector;
+}
+#endif
+
 int mlx5_eq_init(struct mlx5_core_dev *dev)
 {
 	int err;
@@ -1119,5 +1146,7 @@ void mlx5_core_eq_free_irqs(struct mlx5_
 	if (MLX5_CAP_GEN(dev, pg))
 		free_irq(table->pfault_eq.irqn, &table->pfault_eq);
 #endif
+#ifdef HAVE_PCI_IRQ_API
 	pci_free_irq_vectors(dev->pdev);
+#endif
 }
