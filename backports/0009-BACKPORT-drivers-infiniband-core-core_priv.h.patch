From: Leon Romanovsky <leonro@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/core_priv.h

Change-Id: I08d3f9d4adf1859c4acfa440001e3b3da1190994
---
 drivers/infiniband/core/core_priv.h | 42 +++++++++++++++++++++++++++++++++++++
 1 file changed, 42 insertions(+)

--- a/drivers/infiniband/core/core_priv.h
+++ b/drivers/infiniband/core/core_priv.h
@@ -38,6 +38,7 @@
 #include <linux/cgroup_rdma.h>
 
 #include <rdma/ib_verbs.h>
+#include <rdma/ib_addr.h>
 #include <rdma/opa_addr.h>
 #include <rdma/ib_mad.h>
 #include <rdma/restrack.h>
@@ -148,6 +149,7 @@ int ib_cache_setup_one(struct ib_device
 void ib_cache_cleanup_one(struct ib_device *device);
 void ib_cache_release_one(struct ib_device *device);
 
+#ifdef HAVE_CGROUP_RDMA_H
 #ifdef CONFIG_CGROUP_RDMA
 int ib_device_register_rdmacg(struct ib_device *device);
 void ib_device_unregister_rdmacg(struct ib_device *device);
@@ -176,11 +178,39 @@ static inline void ib_rdmacg_uncharge(st
 				      enum rdmacg_resource_type resource_index)
 { }
 #endif
+#endif /* HAVE_CGROUP_RDMA_H */
 
 static inline bool rdma_is_upper_dev_rcu(struct net_device *dev,
 					 struct net_device *upper)
 {
+#if defined(HAVE_NETDEV_HAS_UPPER_DEV_ALL_RCU)
 	return netdev_has_upper_dev_all_rcu(dev, upper);
+#elif defined(HAVE_NETDEV_FOR_EACH_ALL_UPPER_DEV_RCU)
+	struct net_device *_upper = NULL;
+	struct list_head *iter;
+
+	netdev_for_each_all_upper_dev_rcu(dev, _upper, iter)
+		if (_upper == upper)
+			break;
+
+	return _upper == upper;
+#else
+	struct net_device *rdev_upper;
+	struct net_device *master;
+	bool ret;
+
+	if (!upper || !dev)
+	        ret = false;
+
+	rdev_upper = rdma_vlan_dev_real_dev(upper);
+	master = netdev_master_upper_dev_get_rcu(dev);
+
+	ret = (upper == master) ||
+	      (rdev_upper && (rdev_upper == master)) ||
+	      (rdev_upper == dev);
+
+	return ret;
+#endif
 }
 
 int addr_init(void);
@@ -203,14 +233,26 @@ void rdma_nl_exit(void);
 int ibnl_chk_listeners(unsigned int group);
 
 int ib_nl_handle_resolve_resp(struct sk_buff *skb,
+#ifdef HAVE_NETLINK_EXT_ACK
 			      struct nlmsghdr *nlh,
 			      struct netlink_ext_ack *extack);
+#else
+			      struct netlink_callback *cb);
+#endif
 int ib_nl_handle_set_timeout(struct sk_buff *skb,
+#ifdef HAVE_NETLINK_EXT_ACK
 			     struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack);
+#else
+			     struct netlink_callback *cb);
+#endif
 int ib_nl_handle_ip_res_resp(struct sk_buff *skb,
+#ifdef HAVE_NETLINK_EXT_ACK
 			     struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack);
+#else
+			     struct netlink_callback *cb);
+#endif
 
 int ib_get_cached_subnet_prefix(struct ib_device *device,
 				u8                port_num,
