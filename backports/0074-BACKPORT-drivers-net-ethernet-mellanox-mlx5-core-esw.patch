From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c

Change-Id: I8fbac5d65fed3a1e653e972e51b7b408f68a1851
---
 .../ethernet/mellanox/mlx5/core/eswitch_offloads.c | 34 +++++++++++++++++-----
 1 file changed, 27 insertions(+), 7 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@ -113,8 +113,10 @@ mlx5_eswitch_add_offloaded_rule(struct m
 
 	spec->match_criteria_enable = MLX5_MATCH_OUTER_HEADERS |
 				      MLX5_MATCH_MISC_PARAMETERS;
+#ifdef HAVE_TCF_TUNNEL_INFO
 	if (flow_act.action & MLX5_FLOW_CONTEXT_ACTION_DECAP)
 		spec->match_criteria_enable |= MLX5_MATCH_INNER_HEADERS;
+#endif
 
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)
 		flow_act.modify_id = attr->mod_hdr_id;
@@ -730,8 +732,10 @@ static int esw_create_offloads_fast_fdb_
 	if (mlx5_esw_has_fwd_fdb(dev))
 		esw_size >>= 1;
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	if (esw->offloads.encap != DEVLINK_ESWITCH_ENCAP_MODE_NONE)
 		flags |= MLX5_FLOW_TABLE_TUNNEL_EN;
+#endif
 
 	fdb = mlx5_create_auto_grouped_flow_table(root_ns, FDB_FAST_PATH,
 						  esw_size,
@@ -1345,7 +1349,20 @@ static int mlx5_devlink_eswitch_check(st
 	return 0;
 }
 
-int mlx5_devlink_eswitch_mode_set(struct devlink *devlink, u16 mode)
+
+DEFINE_MUTEX(devlink_lock);
+#define DEVLINK_LOCK(func, type1, arg1)\
+func ## _locked(struct devlink *devlink, type1 arg1);\
+int func(struct devlink *devlink, type1 arg1) {\
+	int ret;\
+	mutex_lock(&devlink_lock);\
+	ret = func ## _locked(devlink, arg1);\
+	mutex_unlock(&devlink_lock);\
+	return ret;\
+}\
+int func ## _locked(struct devlink *devlink, type1 arg1)
+
+int DEVLINK_LOCK(mlx5_devlink_eswitch_mode_set, u16, mode)
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
 	u16 cur_mlx5_mode, mlx5_mode = 0;
@@ -1371,7 +1388,7 @@ int mlx5_devlink_eswitch_mode_set(struct
 		return -EINVAL;
 }
 
-int mlx5_devlink_eswitch_mode_get(struct devlink *devlink, u16 *mode)
+int DEVLINK_LOCK(mlx5_devlink_eswitch_mode_get, u16 *, mode)
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
 	int err;
@@ -1383,7 +1400,7 @@ int mlx5_devlink_eswitch_mode_get(struct
 	return esw_mode_to_devlink(dev->priv.eswitch->mode, mode);
 }
 
-int mlx5_devlink_eswitch_inline_mode_set(struct devlink *devlink, u8 mode)
+int DEVLINK_LOCK(mlx5_devlink_eswitch_inline_mode_set, u8, mode)
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
 	struct mlx5_eswitch *esw = dev->priv.eswitch;
@@ -1436,7 +1453,7 @@ out:
 	return err;
 }
 
-int mlx5_devlink_eswitch_inline_mode_get(struct devlink *devlink, u8 *mode)
+int DEVLINK_LOCK(mlx5_devlink_eswitch_inline_mode_get, u8 *, mode)
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
 	struct mlx5_eswitch *esw = dev->priv.eswitch;
@@ -1451,7 +1468,7 @@ int mlx5_devlink_eswitch_inline_mode_get
 
 int mlx5_eswitch_inline_mode_get(struct mlx5_eswitch *esw, int nvfs, u8 *mode)
 {
-	u8 prev_mlx5_mode, mlx5_mode = MLX5_INLINE_MODE_L2;
+	u8 prev_mlx5_mode = 0, mlx5_mode = MLX5_INLINE_MODE_L2;
 	struct mlx5_core_dev *dev = esw->dev;
 	int vport;
 
@@ -1485,7 +1502,7 @@ out:
 	return 0;
 }
 
-int mlx5_devlink_eswitch_encap_mode_set(struct devlink *devlink, u8 encap)
+int DEVLINK_LOCK(mlx5_devlink_eswitch_encap_mode_set, u8, encap)
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
 	struct mlx5_eswitch *esw = dev->priv.eswitch;
@@ -1528,7 +1545,7 @@ int mlx5_devlink_eswitch_encap_mode_set(
 	return err;
 }
 
-int mlx5_devlink_eswitch_encap_mode_get(struct devlink *devlink, u8 *encap)
+int DEVLINK_LOCK(mlx5_devlink_eswitch_encap_mode_get, u8 *, encap)
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
 	struct mlx5_eswitch *esw = dev->priv.eswitch;
@@ -1621,3 +1638,6 @@ struct net_device *mlx5_eswitch_get_upli
 {
 	return mlx5_eswitch_get_rep_netdev(esw, UPLINK_REP_INDEX);
 }
+#ifdef CONFIG_COMPAT_CLS_FLOWER_MOD
+EXPORT_SYMBOL(mlx5_eswitch_get_uplink_netdev);
+#endif
