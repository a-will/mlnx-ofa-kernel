From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/hw/mlx4/qp.c

Change-Id: Ic02b582623de54219d96c8bc10b94d848e6742a3
---
 drivers/infiniband/hw/mlx4/qp.c | 81 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 81 insertions(+)

--- a/drivers/infiniband/hw/mlx4/qp.c
+++ b/drivers/infiniband/hw/mlx4/qp.c
@@ -37,6 +37,7 @@
 #include <linux/slab.h>
 #include <linux/netdevice.h>
 #include <net/inet_ecn.h>
+#include <linux/ratelimit.h>
 
 #include <rdma/ib_cache.h>
 #include <rdma/ib_pack.h>
@@ -83,6 +84,12 @@ enum {
 	MLX4_IB_LSO_HEADER_SPARE	= 128,
 };
 
+#ifndef HAVE_ETH_P_IBOE
+enum {
+	MLX4_IB_IBOE_ETHERTYPE		= 0x8915
+};
+#endif
+
 struct mlx4_ib_sqp {
 	struct mlx4_ib_qp	qp;
 	int			pkey_index;
@@ -781,7 +788,11 @@ static int create_qp_rss(struct mlx4_ib_
 	if (err)
 		return err;
 
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 	err = mlx4_qp_alloc(dev->dev, qpn, &qp->mqp);
+#else
+	err = mlx4_qp_alloc(dev->dev, qpn, &qp->mqp, GFP_KERNEL);
+#endif
 	if (err)
 		goto err_qpn;
 
@@ -990,7 +1001,11 @@ static int create_qp_common(struct mlx4_
 			    struct ib_qp_init_attr *init_attr,
 			    struct ib_udata *udata, int sqpn,
 			    struct mlx4_ib_qp **caller_qp,
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 			    int is_exp)
+#else
+			    gfp_t gfp, int is_exp)
+#endif
 {
 	int qpn;
 	int err;
@@ -1046,14 +1061,22 @@ static int create_qp_common(struct mlx4_
 		if (qp_type == MLX4_IB_QPT_SMI || qp_type == MLX4_IB_QPT_GSI ||
 		    (qp_type & (MLX4_IB_QPT_PROXY_SMI | MLX4_IB_QPT_PROXY_SMI_OWNER |
 				MLX4_IB_QPT_PROXY_GSI | MLX4_IB_QPT_TUN_SMI_OWNER))) {
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 			sqp = kzalloc(sizeof(struct mlx4_ib_sqp), GFP_KERNEL);
+#else
+			sqp = kzalloc(sizeof (struct mlx4_ib_sqp), gfp);
+#endif
 			if (!sqp)
 				return -ENOMEM;
 			qp = &sqp->qp;
 			qp->pri.vid = 0xFFFF;
 			qp->alt.vid = 0xFFFF;
 		} else {
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 			qp = kzalloc(sizeof(struct mlx4_ib_qp), GFP_KERNEL);
+#else
+			qp = kzalloc(sizeof (struct mlx4_ib_qp), gfp);
+#endif
 			if (!qp)
 				return -ENOMEM;
 			qp->pri.vid = 0xFFFF;
@@ -1209,7 +1232,11 @@ static int create_qp_common(struct mlx4_
 			goto err;
 
 		if (qp_has_rq(init_attr)) {
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 			err = mlx4_db_alloc(dev->dev, &qp->db, 0);
+#else
+			err = mlx4_db_alloc(dev->dev, &qp->db, 0, gfp);
+#endif
 			if (err)
 				goto err;
 
@@ -1228,7 +1255,11 @@ static int create_qp_common(struct mlx4_
 		}
 
 		if (mlx4_buf_alloc(dev->dev, qp->buf_size,
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 				   PAGE_SIZE * 2, &qp->buf)) {
+#else
+				   PAGE_SIZE * 2, &qp->buf, gfp)) {
+#endif
 			err = -ENOMEM;
 			goto err_db;
 		}
@@ -1238,14 +1269,26 @@ static int create_qp_common(struct mlx4_
 		if (err)
 			goto err_buf;
 
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 		err = mlx4_buf_write_mtt(dev->dev, &qp->mtt, &qp->buf);
+#else
+		err = mlx4_buf_write_mtt(dev->dev, &qp->mtt, &qp->buf, gfp);
+#endif
 		if (err)
 			goto err_mtt;
 
 		qp->sq.wrid = kvmalloc_array(qp->sq.wqe_cnt,
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 					     sizeof(u64), GFP_KERNEL);
+#else
+					     sizeof(u64), gfp);
+#endif
 		qp->rq.wrid = kvmalloc_array(qp->rq.wqe_cnt,
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 					     sizeof(u64), GFP_KERNEL);
+#else
+					     sizeof(u64), gfp);
+#endif
 		if (!qp->sq.wrid || !qp->rq.wrid) {
 			err = -ENOMEM;
 			goto err_wrid;
@@ -1275,7 +1318,11 @@ static int create_qp_common(struct mlx4_
 	if (init_attr->create_flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK)
 		qp->flags |= MLX4_IB_QP_BLOCK_MULTICAST_LOOPBACK;
 
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 	err = mlx4_qp_alloc(dev->dev, qpn, &qp->mqp);
+#else
+	err = mlx4_qp_alloc(dev->dev, qpn, &qp->mqp, gfp);
+#endif
 	if (err)
 		goto err_qpn;
 
@@ -1586,6 +1633,12 @@ static struct ib_qp *_mlx4_ib_create_qp(
 	int sup_u_create_flags = MLX4_IB_QP_BLOCK_MULTICAST_LOOPBACK | MLX4_IB_QP_CROSS_CHANNEL |
 			            MLX4_IB_QP_MANAGED_SEND | MLX4_IB_QP_MANAGED_RECV;
 	u16 xrcdn = 0;
+#ifndef HAVE_MEMALLOC_NOIO_SAVE
+	gfp_t gfp;
+
+	gfp = (init_attr->create_flags & MLX4_IB_QP_CREATE_USE_GFP_NOIO) ?
+		GFP_NOIO : GFP_KERNEL;
+#endif
 
 	if (init_attr->rwq_ind_tbl)
 		return _mlx4_ib_create_qp_rss(pd, init_attr, udata);
@@ -1602,7 +1655,12 @@ static struct ib_qp *_mlx4_ib_create_qp(
 					MLX4_IB_SRIOV_TUNNEL_QP |
 					MLX4_IB_SRIOV_SQP |
 					MLX4_IB_QP_NETIF |
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 					MLX4_IB_QP_CREATE_ROCE_V2_GSI))
+#else
+					MLX4_IB_QP_CREATE_ROCE_V2_GSI |
+					MLX4_IB_QP_CREATE_USE_GFP_NOIO))
+#endif
 		return ERR_PTR(-EINVAL);
 
 	if (init_attr->create_flags & IB_QP_CREATE_NETIF_QP) {
@@ -1620,6 +1678,9 @@ static struct ib_qp *_mlx4_ib_create_qp(
 		      IB_QP_CREATE_MANAGED_RECV)) {
 
 			if ((init_attr->create_flags & ~(MLX4_IB_SRIOV_SQP |
+#ifndef HAVE_MEMALLOC_NOIO_SAVE
+							 MLX4_IB_QP_CREATE_USE_GFP_NOIO |
+#endif
 							 MLX4_IB_QP_CREATE_ROCE_V2_GSI  |
 							 MLX4_IB_QP_BLOCK_MULTICAST_LOOPBACK) &&
 			     init_attr->qp_type != IB_QPT_UD) ||
@@ -1651,7 +1712,11 @@ static struct ib_qp *_mlx4_ib_create_qp(
 	case IB_QPT_RC:
 	case IB_QPT_UC:
 	case IB_QPT_RAW_PACKET:
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 		qp = kzalloc(sizeof(*qp), GFP_KERNEL);
+#else
+		qp = kzalloc(sizeof(*qp), gfp);
+#endif
 		if (!qp)
 			return ERR_PTR(-ENOMEM);
 		qp->pri.vid = 0xFFFF;
@@ -1660,7 +1725,11 @@ static struct ib_qp *_mlx4_ib_create_qp(
 	case IB_QPT_UD:
 	{
 		err = create_qp_common(to_mdev(pd->device), pd,	MLX4_IB_QP_SRC,
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 				       init_attr, udata, 0, &qp, is_exp);
+#else
+				       init_attr, udata, 0, &qp, gfp, is_exp);
+#endif
 		if (err) {
 			kfree(qp);
 			return ERR_PTR(err);
@@ -1691,7 +1760,11 @@ static struct ib_qp *_mlx4_ib_create_qp(
 		}
 
 		err = create_qp_common(to_mdev(pd->device), pd, MLX4_IB_QP_SRC,
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 				       init_attr, udata, sqpn, &qp, is_exp);
+#else
+				       init_attr, udata, sqpn, &qp, gfp, is_exp);
+#endif
 		if (err)
 			return ERR_PTR(err);
 
@@ -3315,7 +3388,11 @@ static int build_mlx_header(struct mlx4_
 		u16 ether_type;
 		u16 pcp = (be32_to_cpu(ah->av.ib.sl_tclass_flowlabel) >> 29) << 13;
 
+#ifdef HAVE_ETH_P_IBOE
 		ether_type = (!ip_version) ? ETH_P_IBOE:
+#else
+		ether_type = (!ip_version) ? MLX4_IB_IBOE_ETHERTYPE :
+#endif
 			(ip_version == 4 ? ETH_P_IP : ETH_P_IPV6);
 
 		mlx->sched_prio = cpu_to_be16(pcp);
@@ -4443,7 +4520,11 @@ struct ib_wq *mlx4_ib_create_wq(struct i
 		ib_qp_init_attr.create_flags |= IB_QP_CREATE_SCATTER_FCS;
 
 	err = create_qp_common(dev, pd, MLX4_IB_RWQ_SRC, &ib_qp_init_attr,
+#ifdef HAVE_MEMALLOC_NOIO_SAVE
 			       udata, 0, &qp, 0);
+#else
+			       udata, 0, &qp, GFP_KERNEL, 0);
+#endif
 	if (err) {
 		kfree(qp);
 		return ERR_PTR(err);
