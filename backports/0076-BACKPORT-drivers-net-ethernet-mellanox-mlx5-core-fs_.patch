From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/fs_core.c

Change-Id: I06442ff18ecf480a679e0709bef2b2f2e5370516
---
 drivers/net/ethernet/mellanox/mlx5/core/fs_core.c | 28 ++++++++++++++++++++++-
 1 file changed, 27 insertions(+), 1 deletion(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@ -522,7 +522,9 @@ static void del_sw_hw_rule(struct fs_nod
 	fs_get_obj(fte, rule->node.parent);
 	fs_get_obj(fg, fte->node.parent);
 	fs_get_obj(ft, fg->node.parent);
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_del_rule(rule);
+#endif
 	if (rule->sw_action == MLX5_FLOW_CONTEXT_ACTION_FWD_NEXT_PRIO) {
 		mutex_lock(&rule->dest_attr.ft->lock);
 		list_del(&rule->next_ft);
@@ -565,7 +567,9 @@ static void del_hw_fte(struct fs_node *n
 	fs_get_obj(fg, fte->node.parent);
 	fs_get_obj(ft, fg->node.parent);
 
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_del_fte(fte);
+#endif
 	dev = get_dev(&ft->node);
 	if (node->active) {
 		err = mlx5_cmd_delete_fte(dev, ft,
@@ -604,7 +608,9 @@ static void del_hw_flow_group(struct fs_
 	fs_get_obj(fg, node);
 	fs_get_obj(ft, fg->node.parent);
 	dev = get_dev(&ft->node);
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_del_fg(fg);
+#endif
 
 	if (fg->node.active && mlx5_cmd_destroy_flow_group(dev, ft, fg->id))
 		mlx5_core_warn(dev, "flow steering can't destroy fg %d of ft %d\n",
@@ -904,7 +910,7 @@ static int update_root_ft_create(struct
 	struct mlx5_flow_root_namespace *root = find_root(&prio->node);
 	struct mlx5_ft_underlay_qp *uqp;
 	int min_level = INT_MAX;
-	int err;
+	int err = 0;
 	u32 qpn;
 
 	if (root->root_ft)
@@ -1222,7 +1228,9 @@ struct mlx5_flow_group *mlx5_create_flow
 		tree_put_node(&fg->node);
 		return ERR_PTR(err);
 	}
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_add_fg(fg);
+#endif
 	fg->node.active = true;
 
 	return fg;
@@ -1453,7 +1461,9 @@ static int create_auto_flow_group(struct
 	err = mlx5_cmd_create_flow_group(dev, ft, in, &fg->id);
 	if (!err) {
 		fg->node.active = true;
+#ifndef MLX_DISABLE_TRACEPOINTS
 		trace_mlx5_fs_add_fg(fg);
+#endif
 	}
 
 	kvfree(in);
@@ -1613,13 +1623,17 @@ static struct mlx5_flow_handle *add_rule
 		fte->action = old_action;
 		return handle;
 	}
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_set_fte(fte, false);
+#endif
 
 	for (i = 0; i < handle->num_rules; i++) {
 		dest_name = get_dest_name(&handle->rule[i]->dest_attr);
 		tree_add_node(&handle->rule[i]->node, &fte->node, dest_name);
 		kfree(dest_name);
+#ifndef MLX_DISABLE_TRACEPOINTS
 		trace_mlx5_fs_add_rule(handle->rule[i]);
+#endif
 		notify_add_rule(handle->rule[i]);
 	}
 	return handle;
@@ -2542,6 +2556,10 @@ void mlx5_cleanup_fs(struct mlx5_core_de
 	fs_debugfs_cleanup(dev);
 	kmem_cache_destroy(steering->ftes_cache);
 	kmem_cache_destroy(steering->fgs_cache);
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION(3,6,11))
+	kfree(steering->ftes_cache_name);
+	kfree(steering->fgs_cache_name);
+#endif
 	kfree(steering);
 }
 
@@ -2664,6 +2682,10 @@ int mlx5_init_fs(struct mlx5_core_dev *d
 	steering->dev = dev;
 	dev->priv.steering = steering;
 
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION(3,6,11))
+	steering->ftes_cache_name = ftes_cache_name;
+	steering->fgs_cache_name = fgs_cache_name;
+#endif
 	snprintf(ftes_cache_name, CACHE_SIZE_NAME, "fs_ftes_%s", dev->priv.name);
 	snprintf(fgs_cache_name, CACHE_SIZE_NAME, "fs_fgs_%s", dev->priv.name);
 	steering->fgs_cache = kmem_cache_create(fgs_cache_name,
@@ -2720,12 +2742,16 @@ int mlx5_init_fs(struct mlx5_core_dev *d
 			goto err;
 	}
 
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(3,6,11))
 	kfree(ftes_cache_name);
 	kfree(fgs_cache_name);
+#endif
 	return 0;
 err:
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(3,6,11))
 	kfree(ftes_cache_name);
 	kfree(fgs_cache_name);
+#endif
 	mlx5_cleanup_fs(dev);
 	return err;
 }
