From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/uverbs_cmd.c

Change-Id: Ia7a7b7cbe5bbefd26a213bdf5d2118ddd7c3b74b
---
 drivers/infiniband/core/uverbs_cmd.c | 42 ++++++++++++++++++++++++++++++++++++
 1 file changed, 42 insertions(+)

--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@ -82,7 +82,9 @@ ssize_t ib_uverbs_get_context(struct ib_
 	struct ib_udata                   udata;
 	struct ib_ucontext		 *ucontext;
 	struct file			 *filp;
+#ifdef HAVE_CGROUP_RDMA_H
 	struct ib_rdmacg_object		 cg_obj;
+#endif
 	int ret;
 
 	if (out_len < sizeof resp)
@@ -103,9 +105,11 @@ ssize_t ib_uverbs_get_context(struct ib_
 		   in_len - sizeof(cmd) - sizeof(struct ib_uverbs_cmd_hdr),
 		   out_len - sizeof(resp));
 
+#ifdef HAVE_CGROUP_RDMA_H
 	ret = ib_rdmacg_try_charge(&cg_obj, ib_dev, RDMACG_RESOURCE_HCA_HANDLE);
 	if (ret)
 		goto err;
+#endif
 
 	ucontext = ib_dev->alloc_ucontext(ib_dev, &udata);
 	if (IS_ERR(ucontext)) {
@@ -114,20 +118,28 @@ ssize_t ib_uverbs_get_context(struct ib_
 	}
 
 	ucontext->device = ib_dev;
+#ifdef HAVE_CGROUP_RDMA_H
 	ucontext->cg_obj = cg_obj;
+#endif
 	/* ufile is required when some objects are released */
 	ucontext->ufile = file;
 	uverbs_initialize_ucontext(ucontext);
 
+#if defined(HAVE_PUT_TASK_STRUCT_EXPORTED) && defined(HAVE_GET_TASK_PID_EXPORTED) && defined(HAVE_GET_PID_TASK_EXPORTED)
 	rcu_read_lock();
 	ucontext->tgid = get_task_pid(current->group_leader, PIDTYPE_PID);
 	rcu_read_unlock();
+#endif
 	ucontext->closing = 0;
 	ucontext->peer_mem_private_data = NULL;
 	ucontext->peer_mem_name = NULL;
 
 #ifdef CONFIG_INFINIBAND_ON_DEMAND_PAGING
+#ifndef HAVE_INTERVAL_TREE_TAKES_RB_ROOT
 	ucontext->umem_tree = RB_ROOT_CACHED;
+#else
+	ucontext->umem_tree = RB_ROOT;
+#endif
 	init_rwsem(&ucontext->umem_rwsem);
 	ucontext->odp_mrs_count = 0;
 	INIT_LIST_HEAD(&ucontext->no_private_counters);
@@ -175,7 +187,9 @@ err_free:
 	ib_dev->dealloc_ucontext(ucontext);
 
 err_alloc:
+#ifdef HAVE_CGROUP_RDMA_H
 	ib_rdmacg_uncharge(&cg_obj, ib_dev, RDMACG_RESOURCE_HCA_HANDLE);
+#endif
 
 err:
 	mutex_unlock(&file->mutex);
@@ -486,7 +500,11 @@ ssize_t ib_uverbs_open_xrcd(struct ib_uv
 	struct ib_udata			udata;
 	struct ib_uxrcd_object         *obj;
 	struct ib_xrcd                 *xrcd = NULL;
+#ifdef HAVE_FDGET
 	struct fd			f = {NULL, 0};
+#else
+	struct file                    *f = NULL;
+#endif
 	struct inode                   *inode = NULL;
 	int				ret = 0;
 	int				new_xrcd = 0;
@@ -505,6 +523,7 @@ ssize_t ib_uverbs_open_xrcd(struct ib_uv
 	mutex_lock(&file->device->xrcd_tree_mutex);
 
 	if (cmd.fd != -1) {
+#ifdef HAVE_FDGET
 		/* search for file descriptor */
 		f = fdget(cmd.fd);
 		if (!f.file) {
@@ -513,6 +532,19 @@ ssize_t ib_uverbs_open_xrcd(struct ib_uv
 		}
 
 		inode = file_inode(f.file);
+#else
+		f = fget(cmd.fd);
+		if (!f) {
+			ret = -EBADF;
+			goto err_tree_mutex_unlock;
+		}
+
+		inode = f->f_dentry->d_inode;
+		if (!inode) {
+			ret = -EBADF;
+			goto err_tree_mutex_unlock;
+		}
+#endif
 		xrcd = find_xrcd(file->device, inode);
 		if (!xrcd && !(cmd.oflags & O_CREAT)) {
 			/* no file descriptor. Need CREATE flag */
@@ -568,8 +600,13 @@ ssize_t ib_uverbs_open_xrcd(struct ib_uv
 		goto err_copy;
 	}
 
+#ifdef HAVE_FDGET
 	if (f.file)
 		fdput(f);
+#else
+	if (f)
+		fput(f);
+#endif
 
 	uobj_alloc_commit(&obj->uobject);
 
@@ -590,8 +627,13 @@ err:
 	uobj_alloc_abort(&obj->uobject);
 
 err_tree_mutex_unlock:
+#ifdef HAVE_FDGET
 	if (f.file)
 		fdput(f);
+#else
+	if (f)
+		fput(f);
+#endif
 
 	mutex_unlock(&file->device->xrcd_tree_mutex);
 
